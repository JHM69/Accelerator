package org.jhm69.battle_of_quiz.ui.activities.account;import android.Manifest;import android.annotation.SuppressLint;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.media.Image;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.transition.Fade;import android.util.Log;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.Spinner;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;import android.content.SharedPreferences;import androidx.appcompat.app.AppCompatDelegate;import android.content.Context;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.core.content.ContextCompat;import androidx.lifecycle.ViewModelProviders;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.google.android.material.textfield.TextInputLayout;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.firestore.DocumentReference;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.karumi.dexter.Dexter;import com.karumi.dexter.MultiplePermissionsReport;import com.karumi.dexter.PermissionToken;import com.karumi.dexter.listener.PermissionRequest;import com.karumi.dexter.listener.multi.MultiplePermissionsListener;import com.yalantis.ucrop.UCrop;import org.jhm69.battle_of_quiz.R;import org.jhm69.battle_of_quiz.models.Users;import org.jhm69.battle_of_quiz.repository.UserRepository;import org.jhm69.battle_of_quiz.ui.activities.MainActivity;import org.jhm69.battle_of_quiz.ui.activities.notification.ImagePreviewSave;import org.jhm69.battle_of_quiz.viewmodel.UserViewModel;import java.io.File;import java.io.IOException;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Objects;import de.hdodenhof.circleimageview.CircleImageView;import es.dmoral.toasty.Toasty;import id.zelory.compressor.Compressor;import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;import static org.jhm69.battle_of_quiz.ui.activities.MainActivity.userId;public class EditProfile extends AppCompatActivity {    private static final int PICK_IMAGE = 100;    private static final int POST_IMAGE = 154;    public int type = -1;    public Uri imageUri = Uri.parse("android.resource://org.jhm69.battle_of_quiz/" + R.drawable.ic_logo);    public StorageReference storageReference;    public ProgressDialog mDialog;    public String name_, email_, institute_, dept_, location_;    UserViewModel userViewModel;    TextInputLayout deptT;    ConstraintLayout groupL;    Spinner spinner_class;    Spinner spinner_groups;    Spinner spinner_zila;    private FirebaseAuth mAuth;    private EditText name, email, institute, dept, bio;    private CircleImageView profile_image;    private void askPermission() {        Dexter.withActivity(this)                .withPermissions(                        Manifest.permission.WRITE_EXTERNAL_STORAGE,                        Manifest.permission.READ_EXTERNAL_STORAGE                )                .withListener(new MultiplePermissionsListener() {                    @Override                    public void onPermissionsChecked(MultiplePermissionsReport report) {                        // Toasty.info(RegisterActivity.this, "You have denied some permissions permanently, if the app force close try granting permission from settings.", Toasty.LENGTH_LONG, true).show();                    }                    @Override                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {                        token.continuePermissionRequest();                    }                })                .check();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        SharedPreferences sharedPreferences = getSharedPreferences("Theme", Context.MODE_PRIVATE);        String themeName = sharedPreferences.getString("ThemeName", "Default");        if (themeName.equalsIgnoreCase("TealTheme")) {            setTheme(R.style.TealTheme);        } else if (themeName.equalsIgnoreCase("VioleteTheme")) {            setTheme(R.style.VioleteTheme);        } else if (themeName.equalsIgnoreCase("PinkTheme")) {            setTheme(R.style.PinkTheme);        } else if (themeName.equalsIgnoreCase("DelRio")) {            setTheme(R.style.DelRio);        } else if (themeName.equalsIgnoreCase("DarkTheme")) {            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);            setTheme(R.style.Dark);        } else if (themeName.equalsIgnoreCase("Lynch")) {            setTheme(R.style.Lynch);        } else {            setTheme(R.style.AppTheme);        }        setContentView(R.layout.activity_edit_profile);        askPermission();        userViewModel = ViewModelProviders.of(this).get(UserViewModel.class);        mAuth = FirebaseAuth.getInstance();        storageReference = FirebaseStorage.getInstance().getReference().child("images");        name = findViewById(R.id.name);        email = findViewById(R.id.email);        institute = findViewById(R.id.institute_name);        dept = findViewById(R.id.dept_name);        bio = findViewById(R.id.bioTv);        deptT = findViewById(R.id.deptName);        groupL = findViewById(R.id.lyGiftList);        List<String> levels = Arrays.asList(getResources().getStringArray(R.array.class_level));        List<String> groups = Arrays.asList(getResources().getStringArray(R.array.hsc_group));        List<String> zila = Arrays.asList(getResources().getStringArray(R.array.bd_districts));        spinner_class = findViewById(R.id.spinner_class_level);        spinner_groups = findViewById(R.id.spinner_group);        spinner_zila = findViewById(R.id.spinner_zila);        ArrayAdapter<String> spinnerArrayAdapter_type = new ArrayAdapter<>(this,                android.R.layout.simple_spinner_dropdown_item, levels);        spinner_class.setAdapter(spinnerArrayAdapter_type);        ArrayAdapter<String> spinnerArrayAdapter_groups = new ArrayAdapter<>(this,                android.R.layout.simple_spinner_dropdown_item, groups);        spinner_groups.setAdapter(spinnerArrayAdapter_groups);        ArrayAdapter<String> spinnerArrayAdapter_zila = new ArrayAdapter<>(this,                android.R.layout.simple_spinner_dropdown_item, zila);        spinner_zila.setAdapter(spinnerArrayAdapter_zila);        userViewModel.user.observe(this, users -> {            name.setText(users.getName());            institute.setText(users.getInstitute());            email.setText(users.getEmail());            setSpinText(spinner_zila, users.getLocation());            spinner_class.setSelection((int) users.getType());            type = (int) users.getType();            if (users.getType() == 1 || users.getType() == 2) {                groupL.setVisibility(View.VISIBLE);                setSpinText(spinner_groups, users.getDept());            } else {                dept.setVisibility(View.VISIBLE);                dept.setText(users.getDept());            }            bio.setText(users.getBio());            Glide.with(this)                    .setDefaultRequestOptions(new RequestOptions().placeholder(R.drawable.ic_logo_icon))                    .load(users.getImage())                    .into(profile_image);            profile_image.setOnLongClickListener(v -> {                startActivity(new Intent(getApplicationContext(), ImagePreviewSave.class)                        .putExtra("url", users.getImage()));                return false;            });        });        findViewById(R.id.setPro).setOnClickListener(view -> updatePro());        spinner_class.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                type = position;                if (position == 0) {                    deptT.setVisibility(View.VISIBLE);                    groupL.setVisibility(View.GONE);                } else if (position == 1 || position == 2) {                    deptT.setVisibility(View.GONE);                    groupL.setVisibility(View.VISIBLE);                } else {                    deptT.setVisibility(View.GONE);                    groupL.setVisibility(View.GONE);                }            }            public void onNothingSelected(AdapterView<?> parent) {                type = -1;            }        });        spinner_zila.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                location_ = zila.get(position);            }            public void onNothingSelected(AdapterView<?> parent) {                location_ = "";            }        });        spinner_groups.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                dept_ = groups.get(position);            }            public void onNothingSelected(AdapterView<?> parent) {                dept_ = "";            }        });        mDialog = new ProgressDialog(this);        mDialog.setMessage("Please wait..");        mDialog.setIndeterminate(true);        mDialog.setCanceledOnTouchOutside(false);        mDialog.setCancelable(false);        Button register = findViewById(R.id.button);        profile_image = findViewById(R.id.profile_image);        Fade fade = new Fade();        fade.excludeTarget(findViewById(R.id.layout), true);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            fade.excludeTarget(android.R.id.statusBarBackground, true);            fade.excludeTarget(android.R.id.navigationBarBackground, true);            getWindow().setEnterTransition(fade);            getWindow().setExitTransition(fade);        }        register.setOnClickListener(view -> updateUser());    }    private void updateUser() {        Users users = new UserRepository(getApplication()).getUser();        final ProgressDialog dialog = new ProgressDialog(this);        dialog.setIndeterminate(true);        dialog.setCancelable(false);        dialog.setCanceledOnTouchOutside(false);        dialog.setMessage("Updating Details....");        final DocumentReference userDocument = FirebaseFirestore.getInstance().collection("Users").document(Objects.requireNonNull(mAuth.getUid()));           /* if (!Objects.requireNonNull(email.getText()).toString().equals(users.getEmail())) {                new MaterialDialog.Builder(this)                        .title("Email changed")                        .content("It seems that you have changed your email, re-enter your password to change.")                        .inputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD)                        .input("Password", "", new MaterialDialog.InputCallback() {                            @Override                            public void onInput(@NonNull MaterialDialog mdialog, CharSequence input) {                                if (!input.toString().equals("pass")) {                                    dialog.dismiss();                                    mdialog.show();                                    Toasty.error(getApplicationContext(), "Invalid password", Toasty.LENGTH_SHORT, true).show();                                } else {                                    mdialog.dismiss();                                    final FirebaseUser currentuser = mAuth.getCurrentUser();                                    credential = EmailAuthProvider                                            .getCredential(currentuser.getEmail(), input.toString());                                    currentuser.reauthenticate(credential)                                            .addOnCompleteListener(new OnCompleteListener<Void>() {                                                @Override                                                public void onComplete(@NonNull Task<Void> task) {                                                    currentuser.updateEmail(email.getText().toString()).addOnCompleteListener(new OnCompleteListener<Void>() {                                                        @Override                                                        public void onComplete(@NonNull Task<Void> task) {                                                            if (task.isSuccessful()) {                                                                currentuser.sendEmailVerification().addOnSuccessListener(new OnSuccessListener<Void>() {                                                                    @Override                                                                    public void onSuccess(Void aVoid) {                                                                        Map<String, Object> userMap = new HashMap<>();                                                                        userMap.put("email", email.getText().toString());                                                                        FirebaseFirestore.getInstance().collection("Users")                                                                                .document(mAuth.getCurrentUser().getUid())                                                                                .update(userMap)                                                                                .addOnSuccessListener(new OnSuccessListener<Void>() {                                                                                    @Override                                                                                    public void onSuccess(Void aVoid) {                                                                                        dialog.dismiss();                                                                                        users.setEmail(email.getText().toString());                                                                                        userViewModel.insert(users);                                                                                        Toasty.success(getApplicationContext(), "Verification email sent.", Toasty.LENGTH_SHORT, true).show();                                                                                        dialog.dismiss();                                                                                    }                                                                                }).addOnFailureListener(new OnFailureListener() {                                                                            @Override                                                                            public void onFailure(@NonNull Exception e) {                                                                                dialog.dismiss();                                                                                Log.e("Update", "failed: " + e.getLocalizedMessage());                                                                            }                                                                        });                                                                    }                                                                }).addOnFailureListener(new OnFailureListener() {                                                                    @Override                                                                    public void onFailure(@NonNull Exception e) {                                                                        dialog.dismiss();                                                                        Log.e("Error", e.getLocalizedMessage());                                                                        dialog.dismiss();                                                                    }                                                                });                                                            } else {                                                                Log.e("Update email error", task.getException().getMessage() + "..");                                                                dialog.dismiss();                                                            }                                                        }                                                    });                                                }                                            });                                }                            }                        })                        .positiveText("Done")                        .onPositive(new MaterialDialog.SingleButtonCallback() {                            @Override                            public void onClick(@NonNull MaterialDialog mdialog, @NonNull DialogAction which) {                                dialog.show();                            }                        })                        .negativeText("Don't change my email")                        .onNegative(new MaterialDialog.SingleButtonCallback() {                            @Override                            public void onClick(@NonNull MaterialDialog mdialog, @NonNull DialogAction which) {                                dialog.dismiss();                            }                        })                        .cancelable(false)                        .canceledOnTouchOutside(false)                        .show();            }*/        dialog.show();        if (!name.getText().toString().equals(users.getName())) {            users.setName(name.getText().toString());            users.setUsername(getNickName(name.getText().toString()));        }        if (!bio.getText().toString().equals(users.getBio())) {            users.setBio(bio.getText().toString());        }        if (!spinner_zila.getSelectedItem().toString().equals(users.getLocation())) {            users.setLocation(spinner_zila.getSelectedItem().toString());        }        if (!institute.getText().toString().equals(users.getInstitute())) {            users.setInstitute(institute.getText().toString());        }        type = spinner_class.getSelectedItemPosition();        Log.d("Level", String.valueOf(type));        users.setType(type);        if (type == 2 || type == 3) {            if (!spinner_groups.getSelectedItem().toString().equals(users.getDept())) {                users.setDept(dept_);            }        } else {            if (!dept.getText().toString().equals(users.getDept())) {                users.setDept(dept.getText().toString());            }        }        userDocument.set(users).addOnCompleteListener(task -> {            userViewModel.insert(users);            Toasty.success(getApplicationContext(), "Successfully Updated", Toast.LENGTH_SHORT).show();            startActivity(new Intent(getApplicationContext(), MainActivity.class));            dialog.dismiss();        }).addOnFailureListener(e -> {            Toasty.error(EditProfile.this, "Failed", Toast.LENGTH_SHORT).show();            dialog.dismiss();        });    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if(data!=null){        if (requestCode == PICK_IMAGE) {            Uri imageUri = Objects.requireNonNull(data).getData();            UCrop.Options options = new UCrop.Options();            options.setCompressionFormat(Bitmap.CompressFormat.PNG);            options.setCompressionQuality(36);            options.setShowCropGrid(true);            options.setCircleDimmedLayer(true);            options.withAspectRatio(1,1);            UCrop.of(Objects.requireNonNull(imageUri), Uri.fromFile(new File(this.getCacheDir(), "profile_image_boq" + System.currentTimeMillis() + ".png")))                    .withOptions(options)                    .start(this, POST_IMAGE);        }        if (requestCode == POST_IMAGE) {            Uri imageUri = UCrop.getOutput(data);            Uri newImage = imageUri;            try {                File img = new Compressor(EditProfile.this)                        .setMaxHeight(225)                        .setMaxWidth(225)                        .setQuality(50)                        .compressToFile(new File(String.valueOf(imageUri)));                        newImage = Uri.fromFile(new File(String.valueOf(img)));            } catch (IOException ignored) {            }            profile_image.setImageURI(imageUri);            final ProgressDialog mDialog = new ProgressDialog(this);            mDialog.setIndeterminate(true);            mDialog.setMessage("Updating...");            mDialog.setCancelable(false);            mDialog.setCanceledOnTouchOutside(false);            mDialog.show();            Toasty.info(getApplicationContext(), "Updating Image...", Toasty.LENGTH_LONG, true).show();            final StorageReference user_profile = FirebaseStorage.getInstance().getReference().child("images").child(userId + ".png");            user_profile.putFile(Objects.requireNonNull(newImage)).addOnCompleteListener(task -> {                if (task.isSuccessful()) {                    final DocumentReference userDocument = FirebaseFirestore.getInstance().collection("Users").document(userId);                    user_profile.getDownloadUrl().addOnSuccessListener(uri -> {                        Map<String, Object> map = new HashMap<>();                        map.put("image", uri.toString());                        userDocument.update(map)                                .addOnSuccessListener(aVoid -> {                                    userViewModel.updateUserImage(uri.toString());                                    mDialog.dismiss();                                    Toasty.success(getApplicationContext(), "Successfully changed Profile image", Toasty.LENGTH_LONG, true).show();                                })                                .addOnFailureListener(e -> mDialog.dismiss());                    }).addOnFailureListener(e ->                            mDialog.dismiss());                } else {                    mDialog.dismiss();                    Log.e("Error", "listen", task.getException());                }            });        }        }    }    public String getNickName(String fullname_) {        String[] arr = fullname_.split(" ", 2);        return arr[0];    }    public void setSpinText(Spinner spin, String text) {        for (int i = 0; i < spin.getAdapter().getCount(); i++) {            if (spin.getAdapter().getItem(i).toString().contains(text)) {                spin.setSelection(i);            }        }    }    public void skipNow(View view) {        finish();        startActivity(new Intent(getApplicationContext(), MainActivity.class).setFlags(FLAG_ACTIVITY_NEW_TASK));    }    private void updatePro() {        Intent intent = new Intent();        intent.setType("image/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(Intent.createChooser(intent, "Select Profile Picture"), PICK_IMAGE);    }}