package org.jhm69.battle_of_quiz.ui.activities.quiz;import android.annotation.SuppressLint;import android.graphics.Color;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.fragment.app.Fragment;import androidx.lifecycle.ViewModelProviders;import androidx.paging.PagedList;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.firebase.ui.firestore.paging.FirestorePagingAdapter;import com.firebase.ui.firestore.paging.FirestorePagingOptions;import com.firebase.ui.firestore.paging.LoadingState;import com.github.marlonlom.utilities.timeago.TimeAgo;import com.google.android.gms.ads.AdRequest;import com.google.android.gms.ads.AdSize;import com.google.android.gms.ads.AdView;import com.google.android.gms.ads.MobileAds;import com.google.android.material.chip.Chip;import com.google.android.material.chip.ChipGroup;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.Query;import org.jhm69.battle_of_quiz.R;import org.jhm69.battle_of_quiz.models.Player;import org.jhm69.battle_of_quiz.ui.activities.friends.FriendProfile;import org.jhm69.battle_of_quiz.viewmodel.UserViewModel;import java.util.Objects;import de.hdodenhof.circleimageview.CircleImageView;import static org.jhm69.battle_of_quiz.ui.activities.MainActivity.userId;/** * Created by jhm69 */public class Ranking extends Fragment {    String institu, area, sub, typ;    String tag = "All";    private FirebaseFirestore firestore;    long t;    private RecyclerView mRecyclerView;    private SwipeRefreshLayout refreshLayout;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.ranking, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        firestore = FirebaseFirestore.getInstance();        mRecyclerView = view.findViewById(R.id.messageList);        refreshLayout = view.findViewById(R.id.refreshLayout);        UserViewModel userViewModel = ViewModelProviders.of(Objects.requireNonNull(getActivity())).get(UserViewModel.class);        Chip location = view.findViewById(R.id.location);        Chip institute = view.findViewById(R.id.sub);        Chip subject = view.findViewById(R.id.institute);        Chip type = view.findViewById(R.id.type);        userViewModel.user.observe(getActivity(), users -> {            area = users.getLocation();            t = users.getType();            typ = getType(t);            institu = users.getInstitute();            sub = users.getDept();            if (area.equals("")) {                location.setVisibility(View.GONE);            } else {                location.setText(area);            }            if (sub.equals("")) {                subject.setVisibility(View.GONE);            } else {                subject.setText(sub);            }            if (institu.equals("")) {                institute.setVisibility(View.GONE);            } else {                institute.setText(institu);            }            if (typ.equals("")) {                type.setVisibility(View.GONE);            } else {                type.setText(typ);            }        });        mRecyclerView.setItemAnimator(new DefaultItemAnimator());        mRecyclerView.setLayoutManager(new LinearLayoutManager(view.getContext()));        mRecyclerView.setHasFixedSize(true);        mRecyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));        setupAdapter(tag);        ChipGroup chipGroup = view.findViewById(R.id.filter_chip_SS_group);        chipGroup.setOnCheckedChangeListener((group, checkedId) -> {            try {                Chip c = view.findViewById(checkedId);                tag = c.getText().toString();                setupAdapter(tag);            } catch (NullPointerException ignored) {            }        });        refreshLayout.setOnRefreshListener(() -> setupAdapter(tag));        AdView adView = new AdView(requireContext());        adView.setAdSize(AdSize.BANNER);        adView.setAdUnitId("ca-app-pub-1812307912459750/6684826025");        MobileAds.initialize(requireContext(), initializationStatus -> {        });        adView = view.findViewById(R.id.adView);        AdRequest adRequest = new AdRequest.Builder().build();        adView.loadAd(adRequest);    }    private void setupAdapter(String tag) {        PagedList.Config config = new PagedList.Config.Builder()                .setEnablePlaceholders(false)                .setPrefetchDistance(5)                .setPageSize(10)                .build();        Query mQuery = firestore.collection("Users")                .orderBy("score", Query.Direction.DESCENDING);        if (tag.equals("All")) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING);        } else if (tag.equals(typ)) {            mQuery = firestore.collection("Users").whereEqualTo("type", t)                    .orderBy("score", Query.Direction.DESCENDING);        } else if (tag.equals(area)) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING).whereEqualTo("location", area);        } else if (tag.equals(institu)) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING).whereEqualTo("institute", institu);        } else if (tag.equals(sub)) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING).whereEqualTo("dept", sub);        }        FirestorePagingOptions<Player> options = new FirestorePagingOptions.Builder<Player>()                .setLifecycleOwner(this)                .setQuery(mQuery, config, Player.class)                .build();        FirestorePagingAdapter<Player, ViewHolder> mAdapter = new FirestorePagingAdapter<Player, ViewHolder>(options) {            @NonNull            @Override            public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {                View view = getLayoutInflater().inflate(R.layout.item_quiz_profile, parent, false);                return new ViewHolder(view);            }            @SuppressLint({"SetTextI18n", "UseCompatLoadingForColorStateLists"})            @Override            protected void onBindViewHolder(@NonNull ViewHolder holder, int position, @NonNull Player user) {                Objects.requireNonNull(getView()).findViewById(R.id.default_item).setVisibility(View.GONE);                holder.name.setText(user.getName());                if(user.getDept().length() > 1 && user.getInstitute().length() > 1) {                    holder.institute.setText(user.getDept() + ", " + user.getInstitute());                }else if (user.getDept().length()<2) {                    holder.institute.setText(user.getInstitute());                } else if (user.getInstitute().length()<2) {                    holder.institute.setText(user.getDept());                }                if(user.getDept().length()<1 && user.getInstitute().length() < 1){                    holder.institute.setVisibility(View.GONE);                }                int score = (int) user.getScore();                holder.rank.setVisibility(View.VISIBLE);                holder.level.setText(String.valueOf(score));                if (user.getId().equals(userId)) {                    holder.name.setText("You");                    holder.back.setBackgroundColor(Color.parseColor("#DCDCFB"));                }else{                    holder.back.setBackgroundColor(Color.parseColor("#ffffff"));                }                holder.time.setText(getTimeText(user.getLastTimestamp()));                holder.rank.setText(String.valueOf(position + 1));                Glide.with(Objects.requireNonNull(getContext()))                        .setDefaultRequestOptions(new RequestOptions().placeholder(R.drawable.ic_logo))                        .load(user.getImage())                        .into(holder.image);                holder.mView.setOnClickListener(view -> FriendProfile.startActivity(getContext(), user.getId()));            }            @Override            protected void onError(@NonNull Exception e) {                super.onError(e);                Log.e("MainActivity", e.getMessage());            }            @Override            protected void onLoadingStateChanged(@NonNull LoadingState state) {                switch (state) {                    case LOADING_INITIAL:                    case LOADING_MORE:                        refreshLayout.setRefreshing(true);                        break;                    case LOADED:                        if (getItemCount() == 0) {                            Objects.requireNonNull(getView()).findViewById(R.id.default_item).setVisibility(View.VISIBLE);                        }                        refreshLayout.setRefreshing(false);                        break;                    case ERROR:                        Toast.makeText(                                getActivity(),                                "Error Occurred!",                                Toast.LENGTH_SHORT                        ).show();                        refreshLayout.setRefreshing(false);                        break;                    case FINISHED:                        refreshLayout.setRefreshing(false);                        break;                }            }        };        mRecyclerView.setAdapter(mAdapter);    }    private String getTimeText(long lastTimestamp) {        String time = TimeAgo.using(lastTimestamp);        time = time.replaceAll("just now", "now")                .replaceAll(" minutes", "m")                .replaceAll(" minute", "1m")                .replaceAll("about", "")                .replaceAll(" hours", "h")                .replaceAll(" hour", "1h")                .replaceAll(" an", "")                .replaceAll("a ", "1 ")                .replaceAll(" ago", "")                .replaceAll("yesterday", "1d")                .replaceAll(" days", "d")                .replaceAll(" day", "1d");        return time;    }    public static class ViewHolder extends RecyclerView.ViewHolder {        final View mView;        final CircleImageView image;        final TextView name;        final TextView institute;        final TextView level;        final TextView rank, time;        final ConstraintLayout back;        public ViewHolder(View itemView) {            super(itemView);            mView = itemView;            image = mView.findViewById(R.id.image);            name = mView.findViewById(R.id.name);            institute = mView.findViewById(R.id.institute);            level = mView.findViewById(R.id.levelCount);            rank = mView.findViewById(R.id.rank);            back = mView.findViewById(R.id.back);            time = mView.findViewById(R.id.textView4);        }    }    String getType(long t) {        if (t == 0) return "bsc";        if (t == 1) return "hsc";        if (t == 2) return "ssc";        else return "bsc";    }}