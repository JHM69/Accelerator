package org.jhm69.battle_of_quiz.ui.activities.quiz;import android.annotation.SuppressLint;import android.graphics.Color;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.fragment.app.Fragment;import androidx.lifecycle.ViewModelProviders;import androidx.paging.PagedList;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.firebase.ui.firestore.paging.FirestorePagingAdapter;import com.firebase.ui.firestore.paging.FirestorePagingOptions;import com.firebase.ui.firestore.paging.LoadingState;import com.google.android.material.chip.Chip;import com.google.android.material.chip.ChipGroup;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.Query;import org.jhm69.battle_of_quiz.R;import org.jhm69.battle_of_quiz.models.Player;import org.jhm69.battle_of_quiz.ui.activities.friends.FriendProfile;import org.jhm69.battle_of_quiz.viewmodel.UserViewModel;import java.util.Objects;import de.hdodenhof.circleimageview.CircleImageView;import static org.jhm69.battle_of_quiz.ui.activities.MainActivity.userId;/** * Created by jhm69 */public class Ranking extends Fragment {    String institu, area, sub;    String tag = "All";    private FirebaseFirestore firestore;    private FirestorePagingAdapter<Player, ViewHolder> mAdapter;    private RecyclerView mRecyclerView;    private SwipeRefreshLayout refreshLayout;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.ranking, container, false);    }    @Override    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        firestore = FirebaseFirestore.getInstance();        mRecyclerView = view.findViewById(R.id.messageList);        refreshLayout = view.findViewById(R.id.refreshLayout);        UserViewModel userViewModel = ViewModelProviders.of(Objects.requireNonNull(getActivity())).get(UserViewModel.class);        Chip location = view.findViewById(R.id.location);        Chip institute = view.findViewById(R.id.sub);        Chip subject = view.findViewById(R.id.institute);        userViewModel.user.observe(getActivity(), users -> {            area = users.getLocation();            institu = users.getInstitute();            sub = users.getDept();            if (area.equals("")) {                location.setVisibility(View.GONE);            } else {                location.setText(area);            }            if (sub.equals("")) {                subject.setVisibility(View.GONE);            } else {                subject.setText(sub);            }            if (institu.equals("")) {                institute.setVisibility(View.GONE);            } else {                institute.setText(institu);            }        });        mRecyclerView.setItemAnimator(new DefaultItemAnimator());        mRecyclerView.setLayoutManager(new LinearLayoutManager(view.getContext()));        mRecyclerView.setHasFixedSize(true);        mRecyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));        setupAdapter(tag);        ChipGroup chipGroup = view.findViewById(R.id.filter_chip_SS_group);        chipGroup.setOnCheckedChangeListener((group, checkedId) -> {            try {                Chip c = view.findViewById(checkedId);                tag = c.getText().toString();                setupAdapter(tag);            } catch (NullPointerException j) {            }        });        refreshLayout.setOnRefreshListener(() -> setupAdapter(tag));    }    private void setupAdapter(String tag) {        PagedList.Config config = new PagedList.Config.Builder()                .setEnablePlaceholders(false)                .setPrefetchDistance(5)                .setPageSize(10)                .build();        Query mQuery = firestore.collection("Users")                .orderBy("score", Query.Direction.DESCENDING);        if (tag.equals("All")) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING);        } else if (tag.equals("SSC")) {            mQuery = firestore.collection("Users").whereEqualTo("type", 2)                    .orderBy("score", Query.Direction.DESCENDING);        } else if (tag.equals("HSC")) {            mQuery = firestore.collection("Users").whereEqualTo("type", 1)                    .orderBy("score", Query.Direction.DESCENDING);        } else if (tag.equals("BSC")) {            mQuery = firestore.collection("Users").whereEqualTo("type", 0)                    .orderBy("score", Query.Direction.DESCENDING);        } else if (tag.equals(area)) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING).whereEqualTo("location", area);        } else if (tag.equals(institu)) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING).whereEqualTo("institute", institu);        } else if (tag.equals(sub)) {            mQuery = firestore.collection("Users")                    .orderBy("score", Query.Direction.DESCENDING).whereEqualTo("dept", sub);        }        FirestorePagingOptions<Player> options = new FirestorePagingOptions.Builder<Player>()                .setLifecycleOwner(this)                .setQuery(mQuery, config, Player.class)                .build();        mAdapter = new FirestorePagingAdapter<Player, ViewHolder>(options) {            @NonNull            @Override            public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {                View view = getLayoutInflater().inflate(R.layout.item_quiz_profile, parent, false);                return new ViewHolder(view);            }            @SuppressLint({"SetTextI18n", "UseCompatLoadingForColorStateLists"})            @Override            protected void onBindViewHolder(@NonNull ViewHolder holder, int position, @NonNull Player user) {                getView().findViewById(R.id.default_item).setVisibility(View.GONE);                holder.name.setText(user.getName());                holder.institute.setText(user.getDept() + ", " + user.getInstitute());                int score = (int) user.getScore();                holder.rank.setVisibility(View.VISIBLE);                holder.level.setText(String.valueOf(score));                if (user.getId().equals(userId)) {                    holder.name.setText("You");                    holder.back.setBackgroundColor(Color.parseColor("#CCE8FF"));                }                holder.rank.setText(String.valueOf(position + 1));                Glide.with(getContext())                        .setDefaultRequestOptions(new RequestOptions().placeholder(R.drawable.ic_logo_icon))                        .load(user.getImage())                        .into(holder.image);                holder.mView.setOnClickListener(view -> FriendProfile.startActivity(getContext(), user.getId()));            }            @Override            protected void onError(@NonNull Exception e) {                super.onError(e);                Log.e("MainActivity", e.getMessage());            }            @Override            protected void onLoadingStateChanged(@NonNull LoadingState state) {                switch (state) {                    case LOADING_INITIAL:                    case LOADING_MORE:                        refreshLayout.setRefreshing(true);                        break;                    case LOADED:                        if (getItemCount() == 0) {                            getView().findViewById(R.id.default_item).setVisibility(View.VISIBLE);                        }                        refreshLayout.setRefreshing(false);                        break;                    case ERROR:                        Toast.makeText(                                getActivity(),                                "Error Occurred!",                                Toast.LENGTH_SHORT                        ).show();                        refreshLayout.setRefreshing(false);                        break;                    case FINISHED:                        refreshLayout.setRefreshing(false);                        break;                }            }        };        mRecyclerView.setAdapter(mAdapter);    }    public static class ViewHolder extends RecyclerView.ViewHolder {        View mView;        CircleImageView image;        TextView name, institute, level, rank;        ConstraintLayout back;        public ViewHolder(View itemView) {            super(itemView);            mView = itemView;            image = mView.findViewById(R.id.image);            name = mView.findViewById(R.id.name);            institute = mView.findViewById(R.id.institute);            level = mView.findViewById(R.id.levelCount);            rank = mView.findViewById(R.id.rank);            back = mView.findViewById(R.id.back);        }    }}