package org.jhm69.battle_of_quiz.ui.fragment.admin;import static android.content.Context.MODE_PRIVATE;import android.annotation.SuppressLint;import android.content.Context;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.paging.PagedList;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.firebase.ui.firestore.paging.FirestorePagingAdapter;import com.firebase.ui.firestore.paging.FirestorePagingOptions;import com.firebase.ui.firestore.paging.LoadingState;import com.google.android.material.bottomnavigation.BottomNavigationView;import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.Query;import org.jhm69.battle_of_quiz.R;import org.jhm69.battle_of_quiz.adapters.PostViewHolder;import org.jhm69.battle_of_quiz.models.Post;import java.util.ArrayList;import java.util.List;public class AdminFragment extends Fragment {    public static AdminFragment newInstance() {        return new AdminFragment();    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_admin, container, false);    }    @SuppressLint("NonConstantResourceId")    @Override    public void onViewCreated(@NonNull final View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        loadFragmentAdminPage(new AdminFragment.ApprovePostFragment());        BottomNavigationView bottomNavigationView = view.findViewById(R.id.bottom_nav);        bottomNavigationView.setOnNavigationItemSelectedListener(item -> {            if (item.getItemId() == R.id.action_report) {                Toast.makeText(getContext(), "Will be added later.", Toast.LENGTH_SHORT).show();            }            loadFragmentAdminPage(new ApprovePostFragment());            return true;        });    }    private void loadFragmentAdminPage(Fragment fragment) {        assert getFragmentManager() != null;        getFragmentManager()                .beginTransaction()                .replace(R.id.frame_containerfed, fragment)                .commit();    }    public static class ApprovePostFragment extends Fragment {        @SuppressLint("StaticFieldLeak")        public static Context context;        // --Commented out by Inspection (09-Apr-21 12:34 PM):private final List<String> mFriendIdList = new ArrayList<>();        ExtendedFloatingActionButton button;        private RecyclerView mPostsRecyclerView;        private FirebaseFirestore mFirestore;        // --Commented out by Inspection (09-Apr-21 12:34 PM):private View statsheetView;        // --Commented out by Inspection (09-Apr-21 12:34 PM):p// --Commented out by Inspection (09-Apr-21 12:34 PM):rivate BottomSheetDialog mmBottomSheetDialog;        private SwipeRefreshLayout refreshLayout;        @Nullable        @Override        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {            return inflater.inflate(R.layout.frag_home, container, false);        }        @Override        public void onStart() {            super.onStart();            setupAdapter();        }        @Override        public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {            mPostsRecyclerView = view.findViewById(R.id.posts_recyclerview);            mFirestore = FirebaseFirestore.getInstance();            FirebaseAuth mAuth = FirebaseAuth.getInstance();            FirebaseUser currentUser = mAuth.getCurrentUser();            context = getContext();            //refreshLayout = view.findViewById(R.id.refreshLayout);            button = view.findViewById(R.id.soihefawiw);            List<Post> mPostsList = new ArrayList<>();            mPostsRecyclerView.setItemAnimator(new DefaultItemAnimator());            mPostsRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));            mPostsRecyclerView.setHasFixedSize(true);//          mPostsRecyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));            button.setOnClickListener(view1 -> Toast.makeText(getActivity(), "Nothing", Toast.LENGTH_SHORT).show());        }        private void setupAdapter() {            PagedList.Config config = new PagedList.Config.Builder()                    .setEnablePlaceholders(false)                    .setPrefetchDistance(2)                    .setPageSize(3)                    .build();            Query mQuery = mFirestore.collection("PendingPosts")                    .orderBy("timestamp", Query.Direction.DESCENDING);            FirestorePagingOptions<Post> options = new FirestorePagingOptions.Builder<Post>()                    .setLifecycleOwner(this)                    .setQuery(mQuery, config, Post.class)                    .build();            // Instantiate Paging Adapter            // refreshLayout.setRefreshing(true);            //refreshLayout.setRefreshing(false);            // refreshLayout.setRefreshing(false);            //refreshLayout.setRefreshing(false);            FirestorePagingAdapter<Post, PostViewHolder> mAdapter = new FirestorePagingAdapter<Post, PostViewHolder>(options) {                @NonNull                @Override                public PostViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {                    View view = getLayoutInflater().inflate(R.layout.item_feed_post, parent, false);                    return new PostViewHolder(view);                }                @Override                protected void onBindViewHolder(@NonNull PostViewHolder holder, int position, @NonNull Post post) {                    holder.bind(post, holder, position, null, null, false);                }                @Override                protected void onError(@NonNull Exception e) {                    super.onError(e);                    Log.e("MainActivity", e.getMessage());                }                @Override                protected void onLoadingStateChanged(@NonNull LoadingState state) {                    switch (state) {                        case LOADING_INITIAL:                        case LOADING_MORE:                            // refreshLayout.setRefreshing(true);                            break;                        case LOADED:                            //refreshLayout.setRefreshing(false);                            context.getSharedPreferences("Posts", MODE_PRIVATE).edit().putInt("num", getItemCount()).apply();                            break;                        case ERROR:                            Toast.makeText(                                    getActivity(),                                    "Error Occurred!",                                    Toast.LENGTH_SHORT                            ).show();                            // refreshLayout.setRefreshing(false);                            break;                        case FINISHED:                            //refreshLayout.setRefreshing(false);                            break;                    }                }            };            mPostsRecyclerView.setAdapter(mAdapter);        }    }}