package org.jhm69.battle_of_quiz.ui.activities.notification;import android.annotation.SuppressLint;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.afollestad.materialdialogs.MaterialDialog;import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;import com.google.firebase.firestore.CollectionReference;import com.google.firebase.firestore.DocumentChange;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.Query;import org.jhm69.battle_of_quiz.R;import org.jhm69.battle_of_quiz.adapters.NotificationsAdapter;import org.jhm69.battle_of_quiz.models.Notification;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Objects;import static android.content.Context.MODE_PRIVATE;import static androidx.recyclerview.widget.RecyclerView.VERTICAL;import static org.jhm69.battle_of_quiz.ui.activities.MainActivity.userId;public class NotificationFragment extends Fragment {    private List<Notification> notificationsList = new ArrayList<>();    private NotificationsAdapter notificationsAdapter;    private SwipeRefreshLayout refreshLayout;    private CollectionReference notification;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.activity_notifications, container, false);    }    @SuppressLint("InflateParams")    @Override    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        RecyclerView mRecyclerView = view.findViewById(R.id.recyclerView);        refreshLayout = view.findViewById(R.id.refreshLayout);        notificationsList = new ArrayList<>();        notificationsAdapter = new NotificationsAdapter(notificationsList, getActivity());        notification = FirebaseFirestore.getInstance().collection("Users")                .document(userId)                .collection("Info_Notifications");        mRecyclerView.setItemAnimator(new DefaultItemAnimator());        mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity(), VERTICAL, false));        mRecyclerView.addItemDecoration(new DividerItemDecoration(Objects.requireNonNull(getActivity()), DividerItemDecoration.VERTICAL));        mRecyclerView.setHasFixedSize(true);        mRecyclerView.setAdapter(notificationsAdapter);        refreshLayout.setOnRefreshListener(() -> setRefreshing(view));        setRefreshing(view);    }    private void clearAllNotifications() {        new MaterialDialog.Builder(Objects.requireNonNull(getContext()))                .title("Clear All notification")                .content("Are you sure do you want to delete all notification?")                .positiveText("Yes")                .negativeText("No")                .onPositive((dialog, which) -> {                    for(Notification notification1:notificationsList) {                        notification.document(notification1.getId()).delete();                       // notificationsList.remove(notification);                    }                    notificationsAdapter.notifyDataSetChanged();                })                .show();    }    void setRefreshing(View view) {        view.findViewById(R.id.default_item).setVisibility(View.GONE);        refreshLayout.setRefreshing(true);        notificationsList.clear();        try {            notification.orderBy("timestamp", Query.Direction.DESCENDING).limit(15)                    .get()                    .addOnSuccessListener(queryDocumentSnapshots -> {                        if (!queryDocumentSnapshots.isEmpty()) {                            for (DocumentChange documentChange : queryDocumentSnapshots.getDocumentChanges()) {                                if (documentChange.getType() == DocumentChange.Type.ADDED) {                                    refreshLayout.setRefreshing(false);                                    Notification notification = documentChange.getDocument().toObject(Notification.class).withId(documentChange.getDocument().getId());                                    notificationsList.add(notification);                                }                            }                            notificationsAdapter.notifyDataSetChanged();                            if (notificationsList.size() == 0) {                                refreshLayout.setRefreshing(false);                                view.findViewById(R.id.default_item).setVisibility(View.VISIBLE);                            }                        } else {                            refreshLayout.setRefreshing(false);                            view.findViewById(R.id.default_item).setVisibility(View.VISIBLE);                        }                    })                    .addOnFailureListener(e -> {                        refreshLayout.setRefreshing(false);                        e.printStackTrace();                    });        } catch (NullPointerException ignored) {        }    }}