package org.jhm69.battle_of_quiz.repository;import android.app.Application;import android.os.AsyncTask;import androidx.lifecycle.LiveData;import org.jhm69.battle_of_quiz.dao.DaoAccess;import org.jhm69.battle_of_quiz.db.QuizResultDatabase;import org.jhm69.battle_of_quiz.ui.activities.quiz.Result;import java.util.List;public class ResultRepository {    private final DaoAccess resultDao;    private final LiveData<List<Result>> allNotes;    public int JUST_STARTED = -1;    public int OFFLINE_STARTED = -2;    public int JUST_IN = -3;    public int IN_STARTED = -4;    public int COMPLETED = -5;    public ResultRepository(Application application) {        QuizResultDatabase database = QuizResultDatabase.getInstance(application);        resultDao = database.daoAccess();        allNotes = resultDao.getAllResultOfBattle();    }    public void insert(Result result) {        new InsertNoteAsyncTask(resultDao).execute(result);    }    public void update(Result result) {        new UpdateNoteAsyncTask(resultDao).execute(result);    }    public boolean resultExists(String id) {        boolean exist = false;        try {            Result result = resultDao.resultExists(id);            if (result.getMyScore() >= 0 && result.getOtherScore() >= 0) {                exist = true;            }        } catch (Exception ji) {        }        return exist;    }    public boolean resultExistsForSecondPlayer(String id) {        boolean exist = false;        try {            Result result = resultDao.resultExists(id);            if (result != null) {                exist = true;            }        } catch (Exception ji) {        }        return exist;    }    public void delete(Result result) {        new DeleteNoteAsyncTask(resultDao).execute(result);    }    public LiveData<List<Result>> getAllNotes() {        return allNotes;    }    public LiveData<List<Result>> getAllInvites() {        return resultDao.getAllInvites(JUST_IN);    }    public LiveData<List<Result>> getAllCompleted() {        return resultDao.getAllInvites(COMPLETED);    }    public LiveData<List<Result>> getAllPending() {        return resultDao.getAllInvites(IN_STARTED);    }    public LiveData<List<Result>> getAllMyPending() {        return resultDao.getAllInvites(OFFLINE_STARTED);    }    public LiveData<List<Result>> getAllMyCompleted() {        return resultDao.getAllInvites(JUST_STARTED);    }    private static class InsertNoteAsyncTask extends AsyncTask<Result, Void, Void> {        private final DaoAccess resultDao;        private InsertNoteAsyncTask(DaoAccess resultDao) {            this.resultDao = resultDao;        }        @Override        protected Void doInBackground(Result... results) {            resultDao.insertBattleResult(results[0]);            return null;        }    }    private static class UpdateNoteAsyncTask extends AsyncTask<Result, Void, Void> {        private final DaoAccess resultDao;        private UpdateNoteAsyncTask(DaoAccess resultDao) {            this.resultDao = resultDao;        }        @Override        protected Void doInBackground(Result... results) {            resultDao.updateResultOfBattle(results[0]);            return null;        }    }    private static class DeleteNoteAsyncTask extends AsyncTask<Result, Void, Void> {        private final DaoAccess resultDao;        private DeleteNoteAsyncTask(DaoAccess resultDao) {            this.resultDao = resultDao;        }        @Override        protected Void doInBackground(Result... results) {            resultDao.deleteResultOfBattle(results[0]);            return null;        }    }}